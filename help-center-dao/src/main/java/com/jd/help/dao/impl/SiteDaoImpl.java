package com.jd.help.dao.impl;

import com.jd.common.dao.BaseDao;
import com.jd.help.dao.SiteDao;
import com.jd.help.dao.util.Page;
import com.jd.help.domain.Site;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.stereotype.Repository;

import javax.annotation.Resource;
import javax.sql.DataSource;
import java.util.List;

/**
 * Site dao实现
 * generated by bud
 *
 * @author @laichendong
 */
@Repository("siteDao")
@SuppressWarnings("unused")
public class SiteDaoImpl extends BaseDao implements SiteDao {

    private final static Log logger = LogFactory.getLog(SiteDaoImpl.class);

    /**
     * 注入数据源
     */
    @Override
    @Resource(name = "helpCenterDataSource")
    public void setDataSource(DataSource dataSource) {
        super.setDataSource(dataSource);
    }


    public long insert(Site site) {
        return (Long) insert("Site.insert", site);
    }

    public int delete(Site site) {
        return update("Site.delete", site);
    }

    public int update(Site site) {
        return update("Site.update", site);
    }


    public int queryForCount(Site site) {
        return (Integer) queryForObject("Site.queryForCount", site);
    }

    @SuppressWarnings("unchecked")
    public List<Site> queryForList(Site site, int page, int pageSize) {
        Page<Site> condition = new Page<Site>();
        condition.setModel(site);
        condition.setPage(page);
        condition.setPageSize(pageSize);
        return queryForList("Site.queryForList", condition);
    }


    public List<Site> queryAllForList() {
        return queryForList("Site.queryAllForList");
    }

    public Site findOne(Site site) {
        return (Site) queryForObject("Site.findOne", site);
    }

    @Override
    public Site findDefaultSite() {
        return (Site) queryForObject("Site.findDefaultSite");
    }
    public int updateEnName(Site site){
        return update("Site.updateEnName", site);
    }
}
