package com.jd.help.service.impl;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Sets;
import com.jd.common.util.PaginatedList;
import com.jd.common.util.base.PaginatedArrayList;
import com.jd.common.web.result.Result;
import com.jd.help.dao.*;
import com.jd.help.domain.*;
import com.jd.help.domain.knowledge.KnowledgeVO;
import com.jd.help.enums.IssueOptypesEnum;
import com.jd.help.es.search.IssueEsIndexer;
import com.jd.help.jmq.UpdateIssueMessage;
import com.jd.help.jmq.producer.IssueUpdateProducer;
import com.jd.help.service.IssueService;
import com.jd.help.service.RelationKnowledgeService;
import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

import java.util.*;

/**
 * Issue service 实现
 * generated by bud
 *
 * @author @laichendong
 */
@Service("issueService")
public class IssueServiceImpl implements IssueService {

    private static Logger logger = LoggerFactory.getLogger(IssueServiceImpl.class);

    @Resource
    private IssueDao issueDao;

    @Resource
    private IssueRelDao issueRelDao;

    @Resource
    private IssueAnswerDao issueAnswerDao;

    @Resource
    private ScenesButtonRelDao scenesButtonRelDao;

    @Resource
    private IssueOldNewMappingDao issueOldNewMappingDao;

    @Resource
    private RelationKnowledgeDao relationKnowledgeDao;

    @Resource
    private IssueUpdateProducer issueUpdateProducer;

    @Resource
    private IssueEsIndexer issueEsIndexer;

    @Resource
    private RelationKnowledgeService relationKnowledgeService;

    public PaginatedList<Issue> list(IssueQuery issueQuery, int page, int pageSize) {
        PaginatedList<Issue> paginatedList = new PaginatedArrayList<Issue>();
        if (issueQuery == null) {
            return paginatedList;
        }

        int total = issueDao.queryTotalCount(issueQuery);
        if(total > 0){
            List<Issue> issueList = issueDao.queryForIssueList(issueQuery, page, pageSize);
            paginatedList.setIndex(page);
            paginatedList.setPageSize(pageSize);
            paginatedList.setTotalItem(total);
            if (CollectionUtils.isNotEmpty(issueList)) {
                paginatedList.addAll(issueList);
            }
        }
        return paginatedList;
    }

    public Result detail(Issue issue) {
        Result result = new Result();
        if (issue == null) {
            return result;
        }
        result.setSuccess(true);
        issue = issueDao.queryForObject(issue);
        if (issue == null) {
            return result;
        }
        result.addDefaultModel("issue", issue);

        return result;
    }

    public Result insert(IssueBO issueBO) {
        Result result = new Result();
        if (issueBO == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        logger.info("method issue inset execute, param: " + JSON.toJSONString(issueBO));
        Issue issue = issueBO.getIssue();
        if (issue == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        int issueId = 0;
        issueId = (int) issueDao.insert(issue);
        issueBO.getIssue().setId(issueId);

        // 问题插入失败
        if (issueId <= 0) {
            result.setSuccess(false);
            return result;
        }

        // 增加问题答案

        if (issueBO.getIssueAnswer() != null) {
            issueBO.getIssueAnswer().setIssueId(issueId);
            issueAnswerDao.insert(issueBO.getIssueAnswer());
        }

        //插入es

        // 测试环境es mapping莫名被删除，tomcat本地调试注释掉es相关代码
        issueEsIndexer.indexOne(issueId);

        //增加相关问题
        List<IssueRel> issueRelList = issueBO.getIssueRelList();
        if (issueRelList != null && issueRelList.size() > 0) {
            //设置issueID
            setIssueIdToIssueRel(issueRelList, issueId);
            issueRelDao.insert(issueRelList);
        }

        // 关联问题
        insertRelationKnowledge(issueBO.getRelationKnowledgeList(), issueId);

        //增加新老问题维护
        List<IssueOldNewMapping> issueONMapingList = issueBO.getOldNewMappingList();
        if (issueONMapingList != null && issueONMapingList.size() > 0) {
            //设置issueID
            setIssueIdToIssueONMaping(issueONMapingList, issueId);
            issueOldNewMappingDao.insert(issueONMapingList);
        }

        //增加场景化按钮
        List<ScenesButtonRel> scenesButtonRelList = issueBO.getScenesButtonRelList();
        if(CollectionUtils.isNotEmpty(scenesButtonRelList)){
            setIssueIdToSecensButtonRel(scenesButtonRelList, issueId);
            scenesButtonRelDao.insert(scenesButtonRelList);
        }

        //add by xialiang 保存并发布issue时，异步增加knowledge
        if(issue.getStatus() == 1){
            //发送MQ消息
            logger.info("insert sendIssueMessage ADD issueId="+issueId);
            sendIssueMessage(Long.parseLong(issueId+""),IssueOptypesEnum.ADD.getCode());
        }
        return result;
    }

    public Result update(IssueBO issueBO) {
        Result result = new Result();
        if (issueBO == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        logger.info("method issue update execute, param: " + JSON.toJSONString(issueBO));
        Issue issue = issueBO.getIssue();
        if (issue == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        int issueId = issue.getId();
        issueDao.update(issue);

        //修改问题答案
        if (issueBO.getIssueAnswer() != null) {
            issueBO.getIssueAnswer().setIssueId(issueId);
            issueAnswerDao.update(issueBO.getIssueAnswer());
        }

        //整体更新

        // 测试环境es mapping莫名被删除，tomcat本地调试注释掉es相关代码
        issueEsIndexer.indexOne(issueId);

        //修改相关问题，先删除在添加
        List<IssueRel> issueRelList = issueBO.getIssueRelList();
        issueRelDao.delete(issueId);
        if (issueRelList != null && issueRelList.size() > 0) {
            //设置issueID
            setIssueIdToIssueRel(issueRelList, issueId);
            issueRelDao.insert(issueRelList);
        }

        //修改场景化按钮，先删除在添加
        ScenesButtonRel condition = new ScenesButtonRel();
        condition.setType(2);
        condition.setRelId(issueId);
        scenesButtonRelDao.delete(condition);
        
        List<ScenesButtonRel> scenesButtonRelList = issueBO.getScenesButtonRelList();
        if(CollectionUtils.isNotEmpty(scenesButtonRelList)){
            setIssueIdToSecensButtonRel(scenesButtonRelList, issueId);
            scenesButtonRelDao.insert(scenesButtonRelList);
        }

        // 关联问题修改，先全部删除，再重新插入
        if (CollectionUtils.isNotEmpty(issueBO.getRelationKnowledgeList())) {
            int deleteResult = relationKnowledgeDao.deleteRelation((long) issueId);
            if (deleteResult == 0) {
                logger.info(" 关联知识修改，删除旧关联知识删除了0条数据，可能删除失败或该知识未设置过关联知识， issueId: " + issueId);
            }
            insertRelationKnowledge(issueBO.getRelationKnowledgeList(), issueId);
        }

        //修改新老问题维护.先删除在添加
        List<IssueOldNewMapping> issueONMapingList = issueBO.getOldNewMappingList();
        issueOldNewMappingDao.delete(issueId);
        if (issueONMapingList != null && issueONMapingList.size() > 0) {
            //设置issueID
            setIssueIdToIssueONMaping(issueONMapingList, issueId);
            issueOldNewMappingDao.insert(issueONMapingList);
        }
        result.setSuccess(true);

        if(issue.getStatus() == 1){
            //发送MQ消息
            logger.info("update sendIssueMessage ADD issueId="+issueId);
            sendIssueMessage(Long.parseLong(issueId+""),IssueOptypesEnum.ADD.getCode());
        }
        return result;
    }

    public Result queryIssueBOByIssueId(IssueBO issueBO, boolean needRemoveHttp) {
        Result result = new Result();
        if (issueBO == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }

        Issue issue = issueDao.queryForObject(issueBO.getIssue());
        if (issue == null) {
            result.setSuccess(false);
            return result;
        }

        IssueAnswer issueAnswer = issueAnswerDao.queryOneByIssueId(issue.getId());
        if (needRemoveHttp) {
            issueAnswer.removeHttp();
        }

        List<IssueOldNewMapping> oldNewMappingList = issueOldNewMappingDao.queryForListByIssueId(issue.getId());

        List<IssueRel> issueRelList = issueRelDao.queryForListByIssueId(issue.getId());

        ScenesButtonRel condition = new ScenesButtonRel();
        condition.setType(2);
        condition.setRelId(issue.getId());
        List<ScenesButtonRel> scenesButtonRelList = scenesButtonRelDao.queryForList(condition);
        if(CollectionUtils.isEmpty(scenesButtonRelList)){
            condition.setType(1);
            condition.setRelId(issue.getCataId());
            scenesButtonRelList = scenesButtonRelDao.queryForList(condition);
        }

        IssueBO retIssueBO = new IssueBO();
        retIssueBO.setIssue(issue);
        retIssueBO.setIssueAnswer(issueAnswer);
        retIssueBO.setIssueRelList(issueRelList);
        retIssueBO.setOldNewMappingList(oldNewMappingList);
        retIssueBO.setScenesButtonRelList(scenesButtonRelList);

        result.setSuccess(true);
        result.addDefaultModel("issueBO", retIssueBO);

        return result;

    }

    @Override
    public Result queryIssueBOByIssueId2(IssueBO issueBO, boolean needRemoveHttp) {
        Result result = new Result();
        if (issueBO == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }

        Issue issue = issueDao.queryForObject(issueBO.getIssue());
        if (issue == null) {
            result.setSuccess(false);
            return result;
        }

        // 答案
        IssueAnswer issueAnswer = issueAnswerDao.queryOneByIssueId(issue.getId());
        if (needRemoveHttp) {
            issueAnswer.removeHttp();
        }

        // 旧链接
        List<IssueOldNewMapping> oldNewMappingList = issueOldNewMappingDao.queryForListByIssueId(issue.getId());

        // 关联知识
//        relationKnowledgeService.listRelationKnowledge();

        // 场景化按钮
        ScenesButtonRel condition = new ScenesButtonRel();
        condition.setType(2);
        condition.setRelId(issue.getId());
        List<ScenesButtonRel> scenesButtonRelList = scenesButtonRelDao.queryForList(condition);

        IssueBO retIssueBO = new IssueBO();
        retIssueBO.setIssue(issue);
        retIssueBO.setIssueAnswer(issueAnswer);
        retIssueBO.setOldNewMappingList(oldNewMappingList);
        retIssueBO.setScenesButtonRelList(scenesButtonRelList);

        result.setSuccess(true);
        result.addDefaultModel("issueBO", retIssueBO);

        return result;
    }

    private void setIssueIdToIssueRel(List<IssueRel> issueRelList, int issueId) {
        for (IssueRel issueRel : issueRelList) {
            issueRel.setIssueId(issueId);
        }
    }

    private void setIssueIdToIssueONMaping(List<IssueOldNewMapping> issueONMapingList, int issueId) {
        for (IssueOldNewMapping on : issueONMapingList) {
            on.setIssueId(issueId);
        }
    }

    private void setIssueIdToSecensButtonRel(List<ScenesButtonRel> ScenesButtonRelList, int issueId) {
        for (ScenesButtonRel scenesButtonRel : ScenesButtonRelList) {
            scenesButtonRel.setRelId(issueId);
        }
    }

    public Result delete(Issue issue) {
        Result result = new Result();
        if (issue == null || issue.getId() == null || issue.getId() <= 0) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
//        boolean success = issueDao.delete(issue);
//        result.setSuccess(success);
//        if(success){
//            result.setResultCode("system.delete.success");
//        } else {
//            result.setResultCode("system.delete.error");
//        }
        return result;
    }

    @Override
    public Result updateStatus(Issue issue) {
        Result result = new Result();
        if (issue == null || issue.getId() == null || issue.getId() <= 0) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        boolean success = (issueDao.updateStatus(issue) == 1);
        result.setSuccess(success);
        if (success) {
            result.setResultCode("system.update.success");
            //保存issue
            if(issue.getStatus() == 0){
                //add by xialiang 保存issue时异步删除knowledge
                logger.info("updateStatus sendIssueMessage DEL issueId="+issue.getId());
                sendIssueMessage(Long.parseLong(issue.getId()+""),IssueOptypesEnum.DEL.getCode());
            }
        } else {
            result.setResultCode("system.update.error");
        }
        return result;
    }

    public Result updateOrderStatus(Issue issue) {
        Result result = new Result();
        if (issue == null || issue.getId() == null || issue.getId() <= 0) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }
        boolean success = (issueDao.updateOrderStatus(issue) == 1);
        result.setSuccess(success);
        if (success) {
            result.setResultCode("system.update.success");
        } else {
            result.setResultCode("system.update.error");
        }
        return result;
    }

    /**
     * 根据类目ID查询上线的问题列表
     *
     * @param issue
     * @return
     */
    public Result findOnlineList(Issue issue) {
        Result result = new Result();
        if (issue == null) {
            result.setSuccess(false);
            result.setResultCode("system.no.entity.to.operate");
            return result;
        }

        result.addDefaultModel("issueList", issueDao.queryOnlineList(issue));
        return result;
    }

    public void deleteOrderStatus() {
        issueDao.deleteOrderStatus();
    }

    @Override
    public Issue queryById(Integer issueId) {
        if(issueId == null){
            return new Issue();
        }
        Issue condition = new Issue();
        condition.setId(issueId);
        return issueDao.queryForObject(condition);
    }

    // add by xialiang
    private void sendIssueMessage(Long issueId,int opType){
        UpdateIssueMessage updateIssueMessage = new UpdateIssueMessage();
        updateIssueMessage.setIssueId(Long.parseLong(issueId+""));
        updateIssueMessage.setOpType(opType);
        try {
            issueUpdateProducer.sendIssueMessage(updateIssueMessage);
        } catch (Exception e) {
            logger.error("sendIssueMessage error,issueId="+issueId+",,,,,,opType="+opType,e);
        }
    }

    /**
     * 关联知识的插入，如果是知识修改，请在调用该方法前 删除现有的关联知识
     *
     * @param relationKnowledgeList 关联知识集合
     * @param issueId               正在操作的知识id
     */
    private void insertRelationKnowledge(List<KnowledgeVO> relationKnowledgeList, Integer issueId) {
        if (CollectionUtils.isEmpty(relationKnowledgeList) || issueId == null || issueId <= 0) {
            logger.info("method insertRelationKnowledge  return");
            return;
        }
        logger.info("method issue insertRelationKnowledge execute, param: issueId:{}, relationKnowledgeList: {} ", issueId, JSON.toJSONString(relationKnowledgeList));
        // 这条知识关联了哪些知识
        Set<Long> relationIds = Sets.newHashSet();
        if (CollectionUtils.isNotEmpty(relationKnowledgeList)) {
            RelationKnowledge relationKnowledge = null;
            for (KnowledgeVO knowledgeVO : relationKnowledgeList) {
                if (knowledgeVO != null) {
                    relationKnowledge = new RelationKnowledge();
                    // 新建的知识id
                    relationKnowledge.setId((long) issueId);
                    relationKnowledge.setRelationKnowledgeId(knowledgeVO.getId());
                    // 帮助中心关联知识强制-1
                    relationKnowledge.setMenuId(-1);
                    relationKnowledge.setReplaceKnowledgeId(knowledgeVO.getReplaceKnowledgeId());
                    relationKnowledge.setIsStrong(knowledgeVO.getIsStrong());
                    relationKnowledge.setStatus(knowledgeVO.getStatus());
                    relationKnowledgeDao.insert(relationKnowledge);
                    if (knowledgeVO.getStatus() == 0) {
                        relationIds.add(relationKnowledge.getRelationKnowledgeId());
                    }
                }
            }
        }
        // 存储redis
        // tomcat本地注释，dev环境redis不可用
        relationKnowledgeService.addRelationKnowledgeToRedis((long) issueId, relationIds);
    }
}
